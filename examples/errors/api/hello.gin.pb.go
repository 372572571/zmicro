// Code generated by protoc-gen-zmicro-gin. DO NOT EDIT.
// versions:
// - protoc-gen-zmicro-gin v0.2.0
// - protoc                v4.22.2
// source: api/hello.proto

package api

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	http "github.com/zmicro-team/zmicro/core/transport/http"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = errors.New
var _ = context.TODO
var _ = gin.New

type GreeterHTTPServer interface {
	// SayHello
	SayHello(context.Context, *HelloRequest, *HelloReply) error
	// TestError
	TestError(context.Context, *ErrorRequest, *ErrorReply) error
}

func RegisterGreeterHTTPServer(g *gin.RouterGroup, srv GreeterHTTPServer) {
	r := g.Group("")
	{
		r.GET("/hello/:name", _Greeter_SayHello0_HTTP_Handler(srv))
		r.GET("/error/:name", _Greeter_TestError0_HTTP_Handler(srv))
	}
}

func _Greeter_SayHello0_HTTP_Handler(srv GreeterHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		carrier := http.FromCarrier(c.Request.Context())
		shouldBind := func(req *HelloRequest) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return carrier.Validate(c.Request.Context(), req)
		}

		var err error
		var req HelloRequest
		var reply *HelloReply = new(HelloReply)

		if err = shouldBind(&req); err != nil {
			carrier.ErrorBadRequest(c, err)
			return
		}
		err = srv.SayHello(c.Request.Context(), &req, reply)
		if err != nil {
			carrier.Error(c, err)
			return
		}
		carrier.Render(c, reply)
	}
}

func _Greeter_TestError0_HTTP_Handler(srv GreeterHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		carrier := http.FromCarrier(c.Request.Context())
		shouldBind := func(req *ErrorRequest) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return carrier.Validate(c.Request.Context(), req)
		}

		var err error
		var req ErrorRequest
		var reply *ErrorReply = new(ErrorReply)

		if err = shouldBind(&req); err != nil {
			carrier.ErrorBadRequest(c, err)
			return
		}
		err = srv.TestError(c.Request.Context(), &req, reply)
		if err != nil {
			carrier.Error(c, err)
			return
		}
		carrier.Render(c, reply)
	}
}
